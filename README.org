#+TITLE: Literate NixOS System Configuration
#+options: toc:3
#+auto_tangle: t
#+STARTUP: overview

This is my attempt to unify my entire system configuration into one place.
Ideally, this should result in a fully set up system (modulo data) according to my preferences.

While this configuration is meant to be used on ~NixOS~, it is entirely possible, and quite simple, to use parts of this configuration on any ~Linux~ system.
For example, simply moving the files contained in [[file:./doom]] to the ~Doom-Emacs~ configuration folder (=~/.doom.d= by default),
"installs" my ~Emacs~ configuration (modulo installing ~Doom-Emacs~ and the contained packages).

Even though almost the entirety of the source code blocks gets exported to the ~nix~ files [[file:configuration.nix]] and [[file:hephaestus-home.nix]],
we can leverage the power of literate programming to write in e.g. ~bash~ with all expected editing features in Emacs and then simply export them as block-comment to this file.

Note that I am by no means an expert on the ~nix~ ecosystem, so the architecture of essentially everything is highly volatile and all configurations here are a work-in-progress.

* Table of Contents :toc:
:PROPERTIES:
:VISIBILITY: all
:END:
- [[#hardware-configuration][Hardware Configuration]]
- [[#flake][Flake]]
- [[#nixos-system-configuration][NixOS System Configuration]]
  - [[#general-options][General Options]]
  - [[#boot][Boot]]
  - [[#networking][Networking]]
  - [[#locale-settings][Locale Settings]]
  - [[#x-server-de-window-manager-login-manager-keyboard-layout][X Server (DE, Window Manager, Login Manager, Keyboard Layout)]]
  - [[#gnome][Gnome]]
  - [[#fonts][Fonts]]
  - [[#storage-optimization][Storage Optimization]]
  - [[#automatic-updates][Automatic Updates]]
  - [[#file-system][File System]]
  - [[#graphics-card--gaming][Graphics Card & Gaming]]
  - [[#syncthing][Syncthing]]
  - [[#udev-rules][Udev Rules]]
  - [[#other-services--applications][Other Services & Applications]]
  - [[#user-accounts][User Accounts]]
  - [[#close-system-configuration][Close System Configuration]]
- [[#home-manager][Home Manager]]
  - [[#basic-information][Basic Information]]
  - [[#session-variables][Session Variables]]
  - [[#linked-directories--files][Linked Directories / Files]]
  - [[#xdf-mime-applications][XDF MIME Applications]]
  - [[#configured-packages-dotfiles][Configured Packages (Dotfiles)]]
  - [[#unconfigured-packages][Unconfigured Packages]]
  - [[#close-home-manager-context][Close Home Manager Context]]

* Hardware Configuration

Since the hardware configuration ([[file:hardware-configuration.nix]]) is generated automatically, it is not included here in this file.
To generate it, run
#+begin_src shell
sudo nixos-generate-config
#+end_src
IMPORTANT: This overrides [[file:configuration.nix]], which is the primary configuration file for NixOS!
Make sure to not have any edits in your current version of this file that are not present here as well.

* Flake

[[id:38364369-088a-47f1-b807-b5566d9a7b01][Nix Flakes]] (see [[https://nixos.wiki/wiki/Flakes][the NixOS Wiki]]) appear to be the way forward for Nix(OS), as it strongly simplifies version management, especially on multiple machines.
Essentially, you declare all your dependencies in [[file:flake.nix]], i.e. ~nixpkgs~ and ~home-manager~ for this configuration.
When initializing ~Flakes~, a file that describes exactly which version of each dependency is being used is created (see [[file:flake.lock]]).
To update the system, this file needs to be updated, which can be done automatically using the command ~nix flake update~.

While ~Nix Flakes~ are still considered "experimental", they are widely used by this point and it seems doubtful that they will change in such a manner as to completely break.

#+begin_src nix
{
  description = "My NixOS System Configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-22.11";
    home-manager = {
      url = "github:nix-community/home-manager/release-22.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs { inherit system; };
      lib = nixpkgs.lib;

    in {
      nixosConfigurations = {
        hephaestus = lib.nixosSystem {
          inherit system;
          modules = [
            ./hardware-configuration.nix
            ./configuration.nix
            home-manager.nixosModules.home-manager
            {
              home-manager = {
                useGlobalPkgs = true;
                useUserPackages = true;
                users.yusu = import ./hephaestus-home.nix;
              };
            }
          ];
        };
      };
    };
}
#+end_src

* NixOS System Configuration
:PROPERTIES:
:header-args: :results none :tangle configuration.nix
:END:
This section relates to all system-wide configurations, e.g. installing system packages, loading fonts, modifying grub, etc.,
done in the functional ~nix~ language.

Opening of the configuration
#+begin_src nix
{ config, pkgs, ... }:

let
  user = "yusu";
in
{
#+end_src

** General Options
Allow nonfree packages from the ~nix~ repository
#+begin_src nix
nixpkgs.config.allowUnfree = true;
#+end_src

Enable experimental nix features like flakes or the new nix commands.
#+begin_src nix
nix.extraOptions = ''
  experimental-features = nix-command flakes
'';
#+end_src
Optionally, one could also protect nix-shell from garbage collection,
as suggested at
https://github.com/nix-community/nix-direnv#installation

Enable external binary caches; these can speed up new builds significantly, as binaries do not necessarily have to be built by oneself.
#+begin_src nix
nix = {
  settings = {
    substituters = [
      "https://nix-community.cachix.org"
    ];
    trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };
};
#+end_src

This value determines the NixOS release from which the default settings for stateful data,
like file locations and database versions on your system were taken.
Itâ€˜s perfectly fine and recommended to leave this value at the release version of the first install of this system.
Before changing this value read the documentation for this option
(e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
#+name: set_stateVersion
#+begin_src nix
system.stateVersion = "22.05"; # Did you read the comment?
#+end_src

** Boot
Configure the bootloader
#+begin_src nix
boot.loader = {
  timeout = 2;

  # use UEFI
  systemd-boot.enable = true;
  efi.canTouchEfiVariables = true;
  efi.efiSysMountPoint = "/boot/efi";

  # use GRUB
  # grub = {
  #   enable = true;
  #   version = 2;
  #   device = "/dev/sda";
  #   theme = pkgs.nixos-grub2-theme;
  #   # whether to have grub probe for other devices to boot from (e.g. windows)
  #   useOSProber = false;
  # };
};
#+end_src

Set the Linux kernel version to use.
I set this to the Zen kernel for my desktop machines, as this is what this version is optimized for.
#+begin_src nix
boot.kernelPackages = pkgs.linuxKernel.packages.linux_zen;
#+end_src

Set the kernel modules
#+begin_src nix
boot.kernelModules = [
  "kvm-intel"
  # Virtual Camera
  "v4l2loopback"
  # Virtual Microphone, built-in
  "snd-aloop"
];
#+end_src

Enable v4l2loopback, to use OBS as a virtual camera, following [[https://www.reddit.com/r/NixOS/comments/p8bqvu/comment/htcta90/?utm_source=share&utm_medium=web2x&context=3][this reddit comment]]
#+begin_src nix
# Make some extra kernel modules available to NixOS
boot.extraModulePackages = with config.boot.kernelPackages;
  [ v4l2loopback.out ];

# Set initial kernel module settings
boot.extraModprobeConfig = ''
  # exclusive_caps: Skype, Zoom, Teams etc. will only show device when actually streaming
  # card_label: Name of virtual camera, how it'll show up in Skype, Zoom, Teams
  # https://github.com/umlaeute/v4l2loopback
  options v4l2loopback exclusive_caps=1 card_label="Virtual Camera"
'';
#+end_src

** Networking
Networking configuration
#+begin_src nix
networking = {
  hostName = "hephaestus"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networkmanager.enable = true;

  # Open ports in the firewall.
  firewall = {
    enable = true;
    allowedTCPPortRanges = [
      # GS-/KDE-Connect
      { from = 1714; to = 1764; }
    ];

    allowedUDPPortRanges = [
      # GS-/KDE-Connect
      { from = 1714; to = 1764; }
    ];
  };
};


# Enable the OpenSSH daemon.
# services.openssh.enable = true;

#+end_src

Enable the Mullvad VPN service
#+begin_src nix
services.mullvad-vpn.enable = true;
#+end_src

** Locale Settings
#+begin_src nix
# Set your time zone.
time.timeZone = "Europe/Berlin";

# Select internationalization properties.
i18n.defaultLocale = "en_US.utf8";
i18n.extraLocaleSettings = {
  LC_ADDRESS =        "de_DE.utf8";
  LC_IDENTIFICATION = "de_DE.utf8";
  LC_MEASUREMENT =    "de_DE.utf8";
  LC_MONETARY =       "de_DE.utf8";
  LC_NAME =           "de_DE.utf8";
  LC_NUMERIC =        "en_US.utf8";
  LC_PAPER =          "de_DE.utf8";
  LC_TELEPHONE =      "de_DE.utf8";
  LC_TIME =           "de_DE.utf8";
};
#+end_src

** X Server (DE, Window Manager, Login Manager, Keyboard Layout)

#+begin_src nix
services.xserver = {
  # Use the X11 Display Server
  enable = true;
  # Enable Desktop Environment
  desktopManager = {
    gnome.enable = false;
    plasma5.enable = true;
  };
  # Enable Window Managers
  windowManager = {
    qtile.enable = true;
  };
  # Set and configure login manager
  displayManager = {
    sddm = {
      enable = true;
    };
    defaultSession = "none+qtile";
    autoLogin = {
      user = "${user}";
    };
  };
  # Set the X11 keyboard layout.
  # I use the international version of the US layout for my lily58.
  layout = "us";
  xkbVariant = "altgr-intl";
};
#+end_src

** Gnome
:PROPERTIES:
:header-args: :tangle no
:END:
Since I am currently no longer using GNOME, this section is not being tangled into the actual configuration file.

Exclude undesired packages from GNOME
#+begin_src nix
environment.gnome.excludePackages = (with pkgs; [
  gnome-photos
  gnome-tour
]) ++ (with pkgs.gnome; [
  gnome-music
  gedit # text editor
  epiphany # web browser
  geary # email reader
  evince # document viewer
  gnome-characters
  totem # video player
  tali # poker game
  iagno # go game
  hitori # sudoku game
  atomix # puzzle game
]);
#+end_src

Activate ~gnome-settings-daemon~ udev rules
#+begin_src nix
services.udev.packages = with pkgs; [
  gnome.gnome-settings-daemon
];
#+end_src

** Fonts
Even though fonts are available as ~nix~ packages, we need to load them like this so that other applications can load them.
#+begin_src nix
fonts.fonts = with pkgs; [
  open-sans
  ubuntu_font_family
  (nerdfonts.override { fonts = [
      "FiraCode"
      "UbuntuMono"
  ]; })
];
#+end_src

** Storage Optimization
Enable automatic garbage collection.
This deletes old (as specified in the ~options~ variable) generations
and then deletes all unused entries in the nix store.
Run it once a week.
#+begin_src nix
nix.gc = {
  automatic = true;
  dates = "weekly";
  options = "--delete-older-than 14d";
};
#+end_src

Optimize the ~nix~ store automatically.
This will cause identical files to be hard-linked, rather than being created multiple times.
Note that this can cause significant performance impacts on /write/ operations on the ~nix~ store (see [[https://github.com/NixOS/nix/commit/6c4ac299173e3b9772c96bef1e6463b22dcd0227][this commit]]),
e.g. updating the system.
#+begin_src nix
nix.settings.auto-optimise-store = true;
#+end_src
Also note that this only affects /newly created/ files, so, to optimize the entire store, one has to run the optimization manually, i.e. through
#+begin_src sh :tangle no
sudo nix-store --optimize
#+end_src
This operation can take a *long* time, depending on the current size of the store
(took about 22 minutes on my machine, to go from around 155 GB to 115 GB).

** Automatic Updates
Update the system every week.
This is relatively safe to do when using the stable branch of ~NixOS~, since there are no feature updates or breaking changes.
#+begin_src nix
system.autoUpgrade = {
  enable = true;
  flake = "/etc/nixos";
  flags = [ "--update-input" "nixpkgs" ];
};
#+end_src

** File System

Mount the =/tmp= folder as a ~tmpfs~, making it be stored RAM instead of the primary storage device.
This increases access speed to temporary files and makes them ephemeral, as they will be deleted when the system loses power.
Using the ~tmpOnTmpfsSize~ option, the exact size of this temporary file system can be set.
Options for this include absolute sizes (e.g. =12G=) or relative (e.g. =50%=)
#+begin_src nix
boot = {
  tmpOnTmpfs = true;
  tmpOnTmpfsSize = "75%";
};
#+end_src

*** Additional File Systems
Rather than editing =/etc/fstab=, like one usually would to permanently mount a drive,
use the ~fileSystems~ option.

Mount home directory
#+begin_src nix
fileSystems."/home" = {
  label = "home";
  fsType = "ext4";
  options = [ "defaults" ];
};
#+end_src

Mount internal HDD
#+begin_src nix
fileSystems."/mnt/HDD" = {
  label = "HDD";
  fsType = "ntfs";
  options = [ "defaults" "x-systemd.automount" "noauto" ];
};
#+end_src

Mount my media server via ~nfs~.
Since this requires an internet connection, it is not necessarily a good idea to always mount this on boot.
Instead, lazy mount it using the ~x-systemd.automount~ option
#+begin_src nix
fileSystems."/mnt/Media" = {
  device = "192.168.178.74:/srv/nfs/Media";
  fsType = "nfs";
  options = [ "defaults" "x-systemd.automount" "noauto" "timeo=900" "retrans=5" "_netdev" ];
};
#+end_src

** Graphics Card & Gaming
Enable the proprietary Nvidia drivers, following https://nixos.wiki/wiki/Nvidia
#+begin_src nix
services.xserver.videoDrivers = [ "nvidia" ];
hardware.opengl.enable = true;
hardware.nvidia.powerManagement.enable = true;
hardware.nvidia.modesetting.enable = true;
#+end_src

Enable steam on a system level like this, according to https://nixos.wiki/wiki/Steam
#+begin_src nix
programs.steam = {
  enable = true;
  remotePlay.openFirewall = true;       # Open ports in the firewall for Steam Remote Play
  dedicatedServer.openFirewall = false;  # Open ports in the firewall for Source Dedicated Server
};
#+end_src

Enable GameMode
#+begin_src nix
programs.gamemode = {
  enable = true;
};
#+end_src

** Syncthing
Use [[https://syncthing.net/][Syncthing]] for automatic file synchronization, primarily with the local media server.
#+begin_src nix
services.syncthing = {
  enable = true;
  dataDir = "/home/${user}/.syncthing";
  configDir = "/home/${user}/.config/syncthing";
  user = "${user}";
  group = "users";
  overrideDevices = false;     # overrides any devices added or deleted through the WebUI
  overrideFolders = false;     # overrides any folders added or deleted through the WebUI
  devices = import ./.secrets/syncthing/devices.nix;
  folders = import ./.secrets/syncthing/folders.nix;
};
#+end_src
See [[id:e5d5ae0f-88d6-4c47-ab4b-4cfb80ad04c2][secret configuration]] for configuration of the devices and folders.

** Udev Rules

Activate the udev rules necessary for flashing QMK firmware onto my keyboard.
#+begin_src nix
services.udev.packages = [
  pkgs.qmk-udev-rules
];
#+end_src

** Other Services & Applications
#+begin_src nix
# Enable CUPS to print documents.
services.printing = {
  enable = true;
};

# Enable sound with pipewire.
sound.enable = true;
hardware.pulseaudio.enable = false;
security.rtkit.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
  # If you want to use JACK applications, uncomment this
  #jack.enable = true;

  # use the example session manager (no others are packaged yet so this is enabled by default,
  # no need to redefine it in your config for now)
  #media-session.enable = true;
};

# Enable touchpad support (enabled default in most desktopManager).
# services.xserver.libinput.enable = true;
#+end_src

Enable Bluetooth support and blueman as a GUI frontend
#+begin_src nix
hardware.bluetooth.enable = true;
services.blueman.enable = true;
#+end_src

Select packages that shall be install system-wide here.
Programs that are installed implicitly through other options (like pipewire), do not need to be listed here.
It is usually recommended to load packages through these options instead, as this enables further customization options
or includes fixes.
#+begin_src nix
environment.systemPackages = [
  pkgs.vim
  pkgs.wget
  pkgs.git
  pkgs.git-crypt
];
#+end_src

Enable fish on a system level in order to properly generate suggestions for system packages.
#+begin_src nix
programs.fish.enable = true;
#+end_src

Enable flatpaks.
This also requires enabling XDG Desktop Portals.
#+begin_src nix
services.flatpak.enable = true;
xdg.portal = {
  enable = true;
  extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
};
#+end_src

Enable docker
#+begin_src nix
virtualisation.docker.enable = true;
#+end_src

#+begin_src nix
# Some programs need SUID wrappers, can be configured further or are
# started in user sessions.
# programs.mtr.enable = true;
# programs.gnupg.agent = {
#   enable = true;
#   enableSSHSupport = true;
# };
#+end_src

Enable LanguageTool, a grammar and spelling checker, used e.g. by [[Emacs]] through [[id:268d8c53-f6b2-475a-a289-afc7399c3079][langtool]].
#+begin_src nix
services.languagetool = {
  enable = true;
};
#+end_src

** User Accounts
#+begin_src nix
# Define a user account. Don't forget to set a password with â€˜passwdâ€™.
users.users.${user} = {
  isNormalUser = true;
  description = "${user}";
  extraGroups = [ "networkmanager" "wheel" ];
  shell = pkgs.fish;
};
#+end_src

** Close System Configuration
#+begin_src nix
}
#+end_src

* Home Manager
:PROPERTIES:
:header-args: :results none :tangle hephaestus-home.nix
:END:

In this section, we use Home Manager to configure the home user's environment.
This mostly includes local packages and dotfiles.

Open the Home Manager context
#+begin_src nix
{ config, pkgs, ... }:
let
  user = "yusu";
  maildir = "/home/yusu/.mail";
  name = "Jonas Opitz";

in {
#+end_src

** Basic Information
Set the username and home directory
#+begin_src nix
home.username = "${user}";
home.homeDirectory = "/home/${user}";
#+end_src

Similarly to [[set_stateVersion]] for ~NixOS~, set the ~stateVersion~ for ~Home Manager~.
This should not be change after an install.
#+begin_src nix
home.stateVersion = "22.05";
#+end_src

** Session Variables
Add Doom-Emacs' binaries to the path.
#+begin_src nix
home = {
  sessionPath = [
    "/home/${user}/.emacs.d/bin"
    "/home/${user}/.local/bin"
  ];
};
#+end_src

** Linked Directories / Files
Link directories that are not directly related to the configuration of packages (those are linked in [[*Configured Packages (Dotfiles)][Configured Packages]]).

This folder includes any scripts, to be used stand-alone or in applications, such as [[Qtile]].
#+begin_src nix
xdg.configFile."scripts" = {
  source = ./scripts;
  recursive = true;
};
#+end_src

Link the secret (and encrypted) [[file:.secrets/.authinfo.gpg][.authinfo.gpg]] file, which stores logins that [[id:6288c98c-cef6-42a1-ac0c-96952ad5a385][Doom-Emacs]] shall remember.
#+begin_src nix
home.file.".authinfo.gpg" = {
  source = ./.secrets/.authinfo.gpg;
};
#+end_src
** XDF MIME Applications

#+begin_src nix
xdg.mimeApps = {
  enable = true;
  associations = {
    added = {
      "application/pdf"="okularApplication_pdf.desktop";
      "application/xhtml+xml" = "firefox.desktop";
      "inode/directory" = "pcmanfm.desktop";
      "text/plain" = "emacsclient.desktop";
      "x-scheme-handler/mailto" = "thunderbird.desktop";
      "x-scheme-handler/mid" = "thunderbird.desktop";
    };
  };
  defaultApplications = {
    "application/pdf"="okularApplication_pdf.desktop";
    "application/xhtml+xml"="firefox.desktop";
    "application/zip"="pcmanfm.desktop";
    "inode/directory"="pcmanfm.desktop";
    "message/rfc822"="thunderbird.desktop";
    "x-scheme-handler/discord-712465656758665259"="discord.desktop";
    "x-scheme-handler/mailto"="thunderbird.desktop";
    "x-scheme-handler/mid"="thunderbird.desktop";
    "x-scheme-handler/msteams"="teams-for-linux.desktop";
  };
};
#+end_src

** Configured Packages (Dotfiles)

*** Alacritty
[[https://alacritty.org/][Alacritty]] is my terminal emulator of choice.
#+begin_src nix
programs.alacritty = {
  enable = true;
  settings = {
    font = {
      normal = {
        family = "Fira Code Nerd Font";
        style = "Retina";
      };
      bold = {
        family = "Fira Code Nerd Font";
        style = "Bold";
      };
      size = 11;
    };
    colors = {
      primary = {
        background = "0x242730";
        foreground = "0xbbc2cf";
      };
      normal = {
        black = "0x242730";
        red = "0xff6c6b";
        green = "0x98be65";
        yellow = "0xecbe7b";
        blue = "0x51afef";
        magenta = "0xc678dd";
        cyan = "0x46d9ff";
        white = "0xbbc2cf";
      };
    };
  };
};
#+end_src

*** Autorandr
[[https://github.com/phillipberndt/autorandr#readme][Autorandr]] is a utility for xorg and randr that aids in managing monitor profiles.
#+begin_src nix :noweb yes
programs.autorandr = {
  enable = true;
  profiles = {
    <<autorandr_profiles>>
  };
};
#+end_src

**** Configuration

***** Profiles
:PROPERTIES:
:header-args: :tangle no :noweb yes :noweb-ref autorandr_profiles
:END:

#+begin_src nix
"three_sub_cloned" = {
  <<autorandr_fingerprint_three>>
  config = {
    DP-1 = {
      enable = false;
    };
    DP-2 = {
      enable = false;
    };
    DP-3 = {
      enable = false;
    };
    DP-4 = {
      enable = false;
    };
    DP-5 = {
      enable = false;
    };
    DP-0 = {
      crtc = 0;
      mode = "2560x1080";
      position = "0x0";
      primary = true;
      rate = "59.98";
      # x-prop-non_desktop = 0;
    };
    DVI-D-0 = {
      crtc = 1;
      mode = "1920x1080";
      position = "2560x726";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
    HDMI-0 = {
      crtc = 2;
      mode = "1920x1080";
      position = "2560x726";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
  };
};
#+end_src

#+begin_src nix
"three_no_ultrawide" = {
  <<autorandr_fingerprint_three>>
  config = {
    DP-1 = {
      enable = false;
    };
    DP-2 = {
      enable = false;
    };
    DP-3 = {
      enable = false;
    };
    DP-4 = {
      enable = false;
    };
    DP-5 = {
      enable = false;
    };
    DP-0 = {
      enable = false;
    };
    DVI-D-0 = {
      crtc = 1;
      mode = "1920x1080";
      position = "0x0";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
    HDMI-0 = {
      crtc = 2;
      mode = "1920x1080";
      position = "0x0";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
  };
};
#+end_src

#+begin_src nix
"three_only_ultrawide" = {
  <<autorandr_fingerprint_three>>
  config = {
    DP-1 = {
      enable = false;
    };
    DP-2 = {
      enable = false;
    };
    DP-3 = {
      enable = false;
    };
    DP-4 = {
      enable = false;
    };
    DP-5 = {
      enable = false;
    };
    DP-0 = {
      crtc = 0;
      mode = "2560x1080";
      position = "0x0";
      primary = true;
      rate = "59.98";
      # x-prop-non_desktop = 0;
    };
    DVI-D-0 = {
      enable = false;
    };
    HDMI-0 = {
      crtc = 2;
      mode = "1920x1080";
      position = "0x0";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
  };
};
#+end_src

#+begin_src nix
"two_default" = {
  <<autorandr_fingerprint_two>>
  config = {
    DP-1 = {
      enable = false;
    };
    HDMI-0 = {
      enable = false;
    };
    DP-2 = {
      enable = false;
    };
    DP-3 = {
      enable = false;
    };
    DP-4 = {
      enable = false;
    };
    DP-5 = {
      enable = false;
    };
    DP-0 = {
      enable = true;
      crtc = 0;
      mode = "2560x1080";
      position = "0x0";
      primary = true;
      rate = "74.99";
    };
    DVI-D-0 = {
      enable = true;
      crtc = 1;
      mode = "1920x1080";
      position = "2560x667";
      rate = "60.00";
    };
  };
};
#+end_src

#+begin_src nix
"two_rotated_ultrawide" = {
  <<autorandr_fingerprint_two>>
  config = {
    DP-1 = {
      enable = false;
    };
    DP-2 = {
      enable = false;
    };
    DP-3 = {
      enable = false;
    };
    DP-4 = {
      enable = false;
    };
    DP-5 = {
      enable = false;
    };
    DP-0 = {
      crtc = 0;
      mode = "2560x1080";
      position = "0x0";
      primary = true;
      rate = "74.99";
      rotate = "left";
      # x-prop-non_desktop = 0;
    };
    DVI-D-0 = {
      crtc = 1;
      mode = "1920x1080";
      position = "1080x1285";
      rate = "60.00";
      # x-prop-non_desktop = 0;
    };
    HDMI-0 = {
      enable = false;
    };
  };
};
#+end_src

***** Monitor Fingerprints
:PROPERTIES:
:header-args: :tangle no
:END:
Define the identification numbers used to determine which monitor is which.

#+name: autorandr_fingerprint_three
#+begin_src nix
fingerprint = {
  DP-0 = "00ffffffffffff001e6dfa76913906000b1b0104a55022789fca95a6554ea1260f5054256b807140818081c0a9c0b300d1c08100d1cfcd4600a0a0381f4030203a001e4e3100001a003a801871382d40582c4500132a2100001e000000fd00284b5a5a18010a202020202020000000fc004c4720554c545241574944450a0125020314712309060747100403011f1312830100008c0ad08a20e02d10103e96001e4e31000018295900a0a038274030203a001e4e3100001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae";
  DVI-D-0 = "00ffffffffffff001e6dfa76913906000b1b0104a55022789fca95a6554ea1260f5054256b807140818081c0a9c0b300d1c08100d1cfcd4600a0a0381f4030203a001e4e3100001a003a801871382d40582c4500132a2100001e000000fd00284b5a5a18010a202020202020000000fc004c4720554c545241574944450a0125020314712309060747100403011f1312830100008c0ad08a20e02d10103e96001e4e31000018295900a0a038274030203a001e4e3100001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae";
  HDMI-0 = "00ffffffffffff004c2d6f07354332422c14010380331d782aee91a3544c99260f5054bfef80714f8100814081809500950fa940b300023a801871382d40582c4500fd1e1100001e011d007251d01e206e285500fd1e1100001e000000fd00324b1f5111000a202020202020000000fc00534d4258323333310a2020202001cb02031cf14890041f0514131203230907078301000066030c00100080011d80d0721c1620102c2580fd1e1100009e011d8018711c1620582c2500fd1e1100009e011d00bc52d01e20b8285540fd1e1100001e8c0ad090204031200c405500fd1e110000188c0ad08a20e02d10103e9600fd1e110000180000000000000000004c";
};
#+end_src

#+name: autorandr_fingerprint_two
#+begin_src nix
fingerprint = {
  DP-0 = "00ffffffffffff001e6dfa76913906000b1b0104a55022789fca95a6554ea1260f5054256b807140818081c0a9c0b300d1c08100d1cfcd4600a0a0381f4030203a001e4e3100001a003a801871382d40582c4500132a2100001e000000fd00284b5a5a18010a202020202020000000fc004c4720554c545241574944450a0125020314712309060747100403011f1312830100008c0ad08a20e02d10103e96001e4e31000018295900a0a038274030203a001e4e3100001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae";
  DVI-D-0 = "00ffffffffffff004c2d6f07354332422c14010380331d782aee91a3544c99260f5054bfef80714f8100814081809500950fa940b300023a801871382d40582c4500fd1e1100001e011d007251d01e206e285500fd1e1100001e000000fd00324b1f5111000a202020202020000000fc00534d4258323333310a2020202001cb02031cf14890041f0514131203230907078301000066030c00100080011d80d0721c1620102c2580fd1e1100009e011d8018711c1620582c2500fd1e1100009e011d00bc52d01e20b8285540fd1e1100001e8c0ad090204031200c405500fd1e110000188c0ad08a20e02d10103e9600fd1e110000180000000000000000004c";
};
#+end_src

*** Bitwarden
See [[id:37e5a77a-4c07-43d8-a5af-ef3a6ebde2ad][secret configuration]] for the specification of the settings.
#+begin_src nix
programs.rbw = {
  enable = true;
  settings = import ./.secrets/bitwarden_settings.nix;
};
#+end_src

*** Direnv
[[id:97596a76-f045-4d55-9acb-7c70d4407d0d][direnv]] and [[id:fa95e5b0-a67a-4c95-a2f2-1b68c4c4aa2d][nix-direnv]] enable automatic loading of working environments when entering project folders.
#+begin_src nix
programs.direnv = {
  enable = true;
  nix-direnv = {
    enable = true;
  };
};
#+end_src

*** Doom-Emacs
:PROPERTIES:
:ID:       6288c98c-cef6-42a1-ac0c-96952ad5a385
:END:
Doom-Emacs is a configuration framework for Emacs, a highly extensible +operating system+ text editor.

**** Installation
#+name: emacs_install
#+begin_src nix
programs.emacs = {
  enable = true;
  package = pkgs.emacs;
};
#+end_src

Note that additionally, Doom-Emacs has to installed into =~/.emacs.d=.
This can be done by running the script [[reload_doom]].

**** Configuration
For simplicity, I still configure Doom-Emacs in its own separate literate configuration; see [[file:./doom/README.org]].
However, I do not store in my dotfiles. Instead, it is at =/etc/nixos/doom=, so that its changes are still controlled by Home Manager.
The script [[reload_doom]] below, which can be run automatically on file changes within the doom directory, syncs doom configuration changes.
#+begin_src nix
home.file.".doom.d" = {
  source = ./doom;
  recursive = true;
};
#+end_src

#+name: reload_doom
#+begin_src sh :tangle ./scripts/reload_doom.sh :shebang "#!/bin/sh"
DOOM="$HOME/.emacs.d"

if [ ! -d "$DOOM" ]; then
	git clone https://github.com/hlissner/doom-emacs.git $DOOM
	$DOOM/bin/doom -y install
fi

$DOOM/bin/doom sync
#+end_src

*** Dunst
[[id:2231a333-9429-4680-bcfa-dc00d4dd46e2][Dunst]] is a lightweight notification daemon.
#+begin_src nix
services.dunst = {
  enable = true;
};
#+end_src

*** Email
See [[id:87c13fe4-6026-436e-809e-236e74ff0ec4][secret configuration]] for the specification of the email accounts.
#+begin_src nix
accounts.email = {
  maildirBasePath = "${maildir}";
  accounts = import ./.secrets/email_accounts.nix;
};

programs = {
  msmtp.enable = true;
  mbsync.enable = true;
};

services = {
  mbsync = {
    enable = false;
    preExec = "${pkgs.isync}/bin/mbsync -Ha";
    postExec = "${pkgs.mu}/bin/mu index -m ${maildir}";
  };
};
#+end_src

*** Firefox
The well-known, open source internet browser.
#+begin_src nix
programs.firefox = {
  enable = true;
};
#+end_src

*** Fish
Fish stands for "friendly interactive shell", and, as it name suggests, is an alternative to bash that is optimized for interactive use.
One of its primary features are history-based suggestions, completions (even for cli flags), and extensibility.

**** Installation
#+begin_src nix
# Configuration of Fish
programs.fish = {
  enable = true;
#+end_src

**** Initialization
When starting an interactive fish shell, use [[https://github.com/K4rakara/freshfetch/tree/ace04ea8b0eb55d1deee6ad2daa3f45cc913f5ab][freshfetch]] to print some system information.
#+begin_src nix :noweb yes
interactiveShellInit = ''
  <<fish_init>>
'';
#+end_src

#+name: fish_init
#+begin_src fish :tangle no
freshfetch
# Emulates vim's cursor shape behavior
# Set the normal and visual mode cursors to a block
set fish_cursor_default block blink
# Set the insert mode cursor to a line
set fish_cursor_insert line blink
# Set the replace mode cursor to an underscore
set fish_cursor_replace_one underscore blink
# The following variable can be used to configure cursor shape in
# visual mode, but due to fish_cursor_default, is redundant here
set fish_cursor_visual block blink
#+end_src

**** Aliases
#+begin_src nix
shellAliases = {
  # make df outputs human readable
  df = "df -h";
  # show sizes in human reabable format
  free = "free -h";
  # confirm before overriding something when copying
  cp = "cp -i";
  # make ls look nices
  ls = "exa -l --color=always --group-directories-first";
  # ledger budget alias
  budget="ledger --empty -f ~/ledger/main.ledger bal ^budget -X EUR";
  # emacs as a client, whilst swallowing the terminal
  em="devour emacsclient -c";
  # interactively cd utilizing fasd
  # cdz="cd (fasd -dl | grep -iv cache | fzf 2>/dev/tty --no-sort --tac)";
  # always ignore the given options when running autorandr
  autorandr="autorandr --skip-options x-prop-non_desktop";
};
#+end_src

**** Functions
Override the ~fish_user_key_bindings~ function to automatically enable vi key binds whilst keeping =Ctrl+f= for suggestion-completion.
#+begin_src nix
functions = {
  fish_user_key_bindings = {
    body = ''
      fish_vi_key_bindings
      for mode in insert default visual
        bind -M $mode \cf forward-char
      end
    '';
  };
};
#+end_src

**** Plugins
#+begin_src nix
plugins = [
  # autopair.fish adds automatic completion of paratheses, colons, etc.
  {
    name = "autopair.fish";
    src = pkgs.fetchFromGitHub {
      owner = "jorgebucaran";
      repo = "autopair.fish";
      rev = "1.0.4";
      sha256 = "sha256-s1o188TlwpUQEN3X5MxUlD/2CFCpEkWu83U9O+wg3VU=";
    };
  }
  # fasd integration for fish
  # {
  #   name = "fasd";
  #   src = pkgs.fetchFromGitHub {
  #     owner = "oh-my-fish";
  #     repo = "plugin-fasd";
  #     rev = "38a5b6b6011106092009549e52249c6d6f501fba";
  #     sha256 = "06v37hqy5yrv5a6ssd1p3cjd9y3hnp19d3ab7dag56fs1qmgyhbs";
  #   };
  # }
];
#+end_src

**** Close Context
#+begin_src nix
};
#+end_src

**** Prompt
As the shell prompt, use [[id:be6ef0de-04fd-46c4-ba22-444f6c14dec0][starship]].
Its configuration is done outside of the shell configuration.
#+begin_src nix
programs.starship = {
  enable = true;
  enableFishIntegration = true;
  settings = {
    add_newline = false;
    username = {
      style_user = "green bold";
      style_root = "red bold";
      format = "[$user]($style) ";
      disabled = false;
      show_always = true;
    };
    hostname = {
      ssh_only = false;
      format = "on [$hostname](bold yellow) ";
      trim_at = ".";
      disabled = false;
    };
    directory = {
      read_only = " ðŸ”’";
      truncation_length = 10;
      truncate_to_repo = true;
      style = "bold italic blue";
    };
  };
};
#+end_src

*** Gammastep
[[https://gitlab.com/chinstrap/gammastep][Gammastep]] is a utility that gradually adjusts the color temperature and brightness of the screen,
based on time or location.
#+begin_src nix
services.gammastep = {
  enable = false;
  latitude  = 52.5;
  longitude = 13.4;
  temperature = {
    day   = 6500;
    night = 3500;
  };
  tray = true;
  settings = {
    general = {
      fade = 1;
      brigtness-day    = 1.0;
      brightness-night = 0.9;
      gamma-day   = 1.0;
      gamma-night = 0.9;
    };
  };
};
#+end_src

*** GPG
Enable [[id:40a977d3-dc46-4888-b3c8-c6dd57bd9fcc][GPG]] related programs and services.
#+begin_src nix
programs.gpg = {
  enable = true;
};

services.gpg-agent = {
  enable = true;
  pinentryFlavor = "qt";
};
#+end_src

*** Kde Connect
[[https://kdeconnect.kde.org/][KDE Connect]] is an application that allows for interactions between devices, e.g. phones and pcs.
For example, it lets you share the clipboard, send files, and use your phone as a remote.
Note that in addition to enabling it here, firewall exceptions in [[Networking]] have to be added as well.
#+begin_src nix
services.kdeconnect = {
  enable = true;
  indicator = true;
};
#+end_src

*** MangoHud
[[https://github.com/flightlessmango/MangoHud#readme][MangoHud]] is an FPS and general performance overlay for OpenGL and Vulkan applications.
#+begin_src nix
programs.mangohud = {
  enable = true;
  enableSessionWide = false;
  settingsPerApplication = {
    mpv = {
      no_display = true;
    };
  };
};
#+end_src
*** Numlock
Enable the Num Lock by default.
#+begin_src nix
xsession.numlock.enable = true;
#+end_src

*** OBS
[[https://obsproject.com/][OBS]] is THE (open source) video recording and live streaming software.
It can also be used as a [[id:dc74d473-b14a-4fe4-886b-70f2ef47de8a][virtual webcam]], e.g. to crop the output of a camera or apply filters.
#+begin_src nix
programs.obs-studio = {
  enable = true;
};
#+end_src

*** Picom
[[id:5668a1ae-defa-434f-bb47-7ab70d1d0297][Picom]] is an X11 compositor.
#+begin_src nix
services.picom = {
  enable = true;
  backend = "glx";
  vSync = true;
  opacityRules = [
    "95:class_g = 'Alacritty' && focused"
    "80:class_g = 'Alacritty' && !focused"
    "95:class_g = 'Emacs' && focused"
    "80:class_g = 'Emacs' && !focused"
    "95:class_g = 'TelegramDesktop' && focused"
    "80:class_g = 'TelegramDesktop' && !focused"
    "95:class_g = 'Slack' && focused"
    "80:class_g = 'Slack' && !focused"
    "95:class_g = 'Mattermost' && focused"
    "80:class_g = 'Mattermost' && !focused"
    "80:class_g = 'Rofi' && focused"
    "80:class_g = 'Rofi' && !focused"
    "95:class_g = 'Element' && focused"
    "80:class_g = 'Element' && !focused"
    "95:class_g = 'Signal' && focused"
    "80:class_g = 'Signal' && !focused"
    "95:class_g = 'Spotify' && focused"
    "80:class_g = 'Spotify' && !focused"
    "95:class_g = 'Anki' && focused"
    "80:class_g = 'Anki' && !focused"
  ];
};
#+end_src

*** Qtile
[[id:69a95dd3-413f-4d2e-9d6f-0fdba7f76e9e][Qtile]] is my window manager of choice, since its configuration is easy (for me) and its dynamic window management is useful.
Since Home-Manager does not contain a module for Qtile, simple link the configuration directories.
The literate configuration can be found in [[file:./qtile/README.org]].
#+begin_src nix :noweb yes
xdg.configFile."qtile" = {
  source = ./qtile;
  recursive = true;
};
#+end_src

*** Rofi
[[id:74b3949c-8520-43e8-ac26-10e7b3589eb7][rofi]] is an alternative to the popular application launcher ~dmenu~.
#+begin_src nix
programs.rofi = {
  enable = true;
  font = "Fira Code Nerd Font 10";
  terminal = "alacritty";
  theme = "glue_pro_blue";
  cycle = true;
  extraConfig = {
    modi = "window,drun,ssh,combi";
    combi-modi = "window,drun,ssh";
    show-icons = true;
    icon-theme = "Nerd Icons";
    drun-display-format = "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
    disable-history = false;
    sidebar-mode = false;
  };
};
#+end_src

*** River
[[id:67415c24-2de6-44f2-b95b-fdde64582bc4][River]] is a dynamic tiling Wayland compositor.

Link the directory containing the configuration files for ~river~.
For the actual configuration of ~river~, see [[file:river/README.org]].
#+begin_src nix :noweb yes
xdg.configFile."river" = {
  source = ./river;
  recursive = true;
};
#+end_src

Link a wrapper file for launching river, that sets wlroots environment variables to make it work better with nvidia cards
#+begin_src nix :noweb yes
home.file."river_wrapper" = {
  target = ".local/bin/wrapped_river";
  text = ''
    <<wrapped_river>>
  '';
  executable = true;
};
#+end_src

#+name: wrapped_river
#+begin_src sh :bang "#!/usr/bin/env sh" :tangle no
export _JAVA_AWT_WM_NONREPARENTING=1
export XCURSOR_SIZE=24
export LIBVA_DRIVER_NAME=nvidia
export XDG_SESSION_TYPE=wayland
export GBM_BACKEND=nvidia-drm
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export WLR_NO_HARDWARE_CURSORS=1

river
#+end_src

*** Kanshi
A Wayland output manager

#+begin_src nix
services.kanshi = {
  enable = true;
  profiles = {
    default = {
      outputs = [
        {
          criteria = "DP-1";
          mode = "2560x1080@75";
        }
        {
          criteria = "DVI-D-1";
          mode = "1920x1080@60";
        }
      ];
    };
  };
};
#+end_src

*** Vale
[[id:3780dd1f-073c-4440-a9eb-a771e31c0792][Vale]] is a code-linting style cli for prose.
Since there is no Home Manager module available, it needs to be installed as a normal package.
Additionally, we define its configuration file here and link it.

The configuration of vale
#+name: vale_configuration
#+begin_src conf :tangle no
StylesPath = ".vale"
MinAlertLevel = suggestion # suggestion, warning or error

# the file formats to use
[*.{md,txt,org}]
# List of styles to load.
BasedOnStyles = proselint
#+end_src

Link the vale configuration defined above, using org-babel's noweb
#+begin_src nix :noweb yes
home.file.".vale.ini" = {
  text = ''
    <<vale_configuration>>
  '';
};
#+end_src

Fetch the proselint style for vale from https://github.com/errata-ai/proselint and link it
#+begin_src nix
home.file.".vale" = {
  source = pkgs.fetchFromGitHub {
    owner = "errata-ai";
    repo = "proselint";
    rev = "acedc7cb5400c65201ff06382ff0ce064bc338cb";
    sha256 = "sha256-faeWr1bRhnKsycJY89WqnRv8qIowUmz3EQvDyjtl63w=";
  };
};
#+end_src

*** Zoxide
[[https://github.com/ajeetdsouza/zoxide/tree/e4b9e12b0f28997b683ab50905c402c5f5c4a17c][Zoxide]] is an autojump-like cli tool that lets you cd into frequently used directories without having to type out their entire path.
#+begin_src nix
programs.zoxide = {
  enable = true;
  enableFishIntegration = true;
};
#+end_src

** Unconfigured Packages
List of all packages to use that are not directly configured through Home Manager.
This does not include packages like fish, as there are added automatically through options and configured in [[Dotfiles]].
#+begin_src nix :noweb yes
nixpkgs.config.allowUnfree = true;
home.packages = [
  <<home_packages>>
];
#+end_src

*** List of Packages
:PROPERTIES:
:header-args: :tangle no :noweb yes :noweb-ref home_packages
:END:

**** Office, Mail, Messengers
#+begin_src nix
pkgs.libreoffice-fresh

pkgs.thunderbird
pkgs.mattermost-desktop
pkgs.element-desktop
pkgs.zoom-us
pkgs.librewolf
pkgs.discord
#+end_src

**** Gaming
#+begin_src nix
pkgs.heroic
pkgs.gamescope
pkgs.yuzu-mainline
pkgs.prismlauncher
pkgs.protonup-ng
#+end_src

**** Multimedia
#+begin_src nix
pkgs.spotify
pkgs.jellyfin-media-player
pkgs.yacreader
pkgs.okular
pkgs.transgui
#+end_src

**** CLI Tools
Controlling media / volume
#+begin_src nix
pkgs.playerctl
pkgs.pamixer
pkgs.pavucontrol
#+end_src

A prettier replacement for ~ls~
#+begin_src nix
pkgs.exa
#+end_src

Fuzzy file finder
#+begin_src nix
pkgs.fzf
#+end_src

A system monitor
#+begin_src nix
pkgs.glances
#+end_src

CLI for mullvad VPN
#+begin_src nix
pkgs.mullvad
#+end_src

Swallow terminal when using it to launch GUI applications
#+begin_src nix
pkgs.devour
#+end_src

Archiving tools
#+begin_src nix
pkgs.zip
pkgs.unzip
#+end_src

**** Others
#+begin_src nix
# screenshots
pkgs.libsForQt5.spectacle
# qt-based pin entry
pkgs.pinentry_qt
#+end_src

**** LaTeX
#+begin_src nix
(let
  tex = (pkgs.texlive.combine {
    inherit (pkgs.texlive)
      scheme-small dvisvgm dvipng # for preview and export as html
      latexmk wrapfig amsmath ulem hyperref capt-of xpatch csquotes biblatex
      placeins algorithm2e ifoddpage relsize
      # for CV:
      pdfx xmpincl fontawesome5 tcolorbox environ enumitem dashrule changepage
      multirow ifmtarg paracol lato fontaxes
      # another cv document class, with a cover letter
      limecv xstring titlesec textpos;
  });
in tex) pkgs.biber pkgs.texlab
#+end_src

**** Dependencies
***** Doom Emacs
#+begin_src nix
# general
pkgs.fd
pkgs.ripgrep
pkgs.sqlite
# emacs everywhere
pkgs.xorg.xwininfo
pkgs.xdotool
pkgs.xclip
# nix formatter
pkgs.nixfmt
# shell formatting / linting
pkgs.shfmt
pkgs.shellcheck
# C compiler e.g. to compile EmacSQL
pkgs.gcc
# for the email client mu4e
pkgs.mu
pkgs.isync
# plain text accounting
pkgs.ledger
# spellcheckers
pkgs.hunspell
pkgs.hunspellDicts.de_DE
pkgs.hunspellDicts.en_US
pkgs.vale
# for org-media-notes
pkgs.mpv
#+end_src

***** Qtile
#+begin_src nix
pkgs.feh
pkgs.freshfetch
pkgs.rofi
#+end_src

***** River
:PROPERTIES:
:header-args: :tangle no
:END:
These are disable for now, since I am not using River.

#+begin_src nix
pkgs.river
pkgs.waybar
pkgs.python3
#+end_src

** Close Home Manager Context
#+begin_src nix
}
#+end_src
