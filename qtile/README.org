#+TITLE: Qtile Config
#+PROPERTY: header-args :tangle config.py
#+STARTUP: overview
#+auto_tangle: t

* Table of Contents :toc:
- [[#imports][Imports]]
- [[#constants][Constants]]
- [[#layouts][Layouts]]
  - [[#layout-configuration][Layout Configuration]]
- [[#groups][Groups]]
- [[#keybindings][Keybindings]]
  - [[#essentials][Essentials]]
  - [[#groups-1][Groups]]
  - [[#windows][Windows]]
  - [[#applications--scripts][Applications & Scripts]]
  - [[#media-keys][Media Keys]]
  - [[#brightness-controls][Brightness Controls]]
- [[#scratchpads][Scratchpads]]
  - [[#creating-scratchpads][Creating Scratchpads]]
  - [[#technicalities-putting-everything-together][Technicalities (Putting Everything Together)]]
- [[#colors][Colors]]
- [[#prompt][Prompt]]
- [[#default-widget-settings][Default Widget Settings]]
- [[#widgets][Widgets]]
- [[#screens][Screens]]
- [[#drag-floating-windows][Drag floating windows]]
- [[#floating-windows][Floating windows]]
- [[#startup-applications][Startup applications]]

* Imports
These are python modules that must be imported for this config.

#+BEGIN_SRC python
import os
import re
import socket
import subprocess
import asyncio
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen, ScratchPad, DropDown
from libqtile.lazy import lazy
from libqtile import layout, bar, widget, hook
from typing import List  # noqa: F401from typing import List  # noqa: F401
#+END_SRC

* Constants
Define common applications and folders as variables.

#+BEGIN_SRC python
my_term = "alacritty"      # My terminal of choice
my_browser = "librewolf"     # My browser of choice
HOME = os.path.expanduser('~')
#+END_SRC

* Layouts
In Qtile, layouts define how exactly a stack of windows should appear on the screen.
They can be configured individually and switched between easily.

Initialize the empty list of layouts
#+BEGIN_SRC python
layouts = []
#+END_SRC

** Layout Configuration

Some default values that are used in most layouts.
#+BEGIN_SRC python
default_layout_theme = {
    "border_width": 2,
    "border_focus": "e1acff",
    "border_normal": "1D2330",
}
default_margin = 15
#+END_SRC

The =MonadTall= layout is my default layout on a 16:9 Monitor when rotated horizontally.
For vertical monitors, I use the =MonadWide= layout.
Both contain one main window, which by default occupies one half of the screen,
and a stack of secondary windows, which by default equally share the remaining half.
The difference between =MonadTall= and =MonadWide= is in how they handle the splits:
=MonadTall= splits the first half of the screen vertically, and then splits the secondary windows horizontally.
=MonadWide= does the exact opposite.
#+begin_src python
layouts.extend(
    [
        layout.MonadTall(margin=default_margin, **default_layout_theme),
        layout.MonadWide(margin=default_margin, **default_layout_theme),
    ]
)
#+end_src

The =MonatThreeCol= layout is similar to =MonadTall=, but splits the screen into one main window and two columns of secondary windows.
This is especially useful for ultra-wide monitors.
#+begin_src python
layouts.append(
    layout.MonadThreeCol(
        new_client_position="below_current", ratio=0.4, margin=default_margin, **default_layout_theme
    )
)
#+end_src

The =RatioTile= layout tiles the windows in such a way that all windows have the same ratio.
This is especially useful when having multiple windows of the same importance on the screen, e.g. for a messengers group.
#+begin_src python
layouts.append(layout.RatioTile(fancy=True, margin=default_margin // 2, **default_layout_theme))
#+end_src

* Groups
Groups are similar to workspaces.
Each group is assigned a key (the =name=-attribute), a label, and a layout.

#+begin_src python
left_keys = ["period", "p", "y", "e", "u", "i"]
right_keys = ["g", "c", "r", "t", "n"]
group_keys = left_keys + right_keys
groups = [
    # left groups
    Group(
        name=group_keys[0],
        label=",",
        layout="ratiotile",
        matches=[
            Match(wm_class=["Telegram", "Slack", "Mattermost", "Signal", "Element", "discord"]),
        ],
    ),
    Group(name=group_keys[1], label="P", layout="monadthreecol"),
    Group(name=group_keys[2], label="Y", layout="monadthreecol"),
    Group(name=group_keys[3], label="E", layout="monadthreecol"),
    Group(name=group_keys[4], label="U", layout="monadthreecol"),
    Group(name=group_keys[5], label="I", layout="monadthreecol"),
    # right groups
    Group(name=group_keys[6], label="G", layout="monadtall"),
    Group(name=group_keys[7], label="C", layout="monadtall"),
    Group(
        name=group_keys[8],
        label="R",
        matches=[Match(wm_class=["thunderbird"])],
    ),
    Group(name=group_keys[9], label="T", layout="monadtall"),
    Group(name=group_keys[10], label="N", layout="monadtall"),
]
#+end_src

* Keybindings
All keybindings are stored in the list ~keys~.

#+begin_src python
keys = []
#+end_src

** Essentials

#+begin_src python
keys.extend([
    ### The essentials
    Key(["mod4"], "Tab",
        lazy.next_layout(),
        desc='Toggle through layouts'
        ),
    Key(["mod4"], "x",
        lazy.window.kill(),
        desc='Kill active window'
        ),
    Key(["mod4", "shift", "control"], "r",
        lazy.restart(),
        desc='Restart Qtile'
        ),
    Key(["mod4", "shift"], "Escape",
        lazy.shutdown(),
        desc='Shutdown Qtile'
        ),
    Key(["mod4"], "Escape",
        lazy.spawn(f"rofi -show powermenu -modi powermenu:{HOME}/.config/scripts/rofi/rofi-power-menu.sh"),
        desc="Rofi Power-Menu",
        )
])
#+end_src

** Groups
Keybinds that are related to moving (windows) to groups [workspaces].

Bind the keys for interacting with the primary groups
#+begin_src python
for monitor, group_keys in enumerate([left_keys, right_keys]):
   for key in group_keys:
      keys.extend(
         [
            # move to group
               Key(
                  ["mod4"], key,
                  lazy.to_screen(monitor),
                  lazy.group[key].toscreen(),
                  desc="Move to group",
               ),
            # move to group with current window
               Key(
                  ["mod4", "shift"], key,
                  lazy.window.togroup(key),
                  lazy.to_screen(monitor),
                  lazy.group[key].toscreen(),
                  desc="Move to group with current window",
               ),
            # move only current window
               Key(
                  ["mod4", "control"], key,
                  lazy.window.togroup(key),
                  desc=f"Move window to group {key}",
               ),
         ]
      )
#+end_src

** Windows

#+begin_src python
vim_down = "j"
vim_up = "k"
vim_left = "h"
vim_right = "l"
keys.extend(
    [
        Key(["mod4"], vim_down, lazy.layout.down(), desc="Move focus down"),
        Key(["mod4"], vim_up, lazy.layout.up(), desc="Move focus up"),
        Key(
            ["mod4", "shift"],
            vim_down,
            lazy.layout.swap_left(),
            desc="Move windows down in current stack",
        ),
        Key(
            ["mod4", "shift"],
            vim_up,
            lazy.layout.swap_right(),
            desc="Move windows up in current stack",
        ),
        Key(
            ["mod4"],
            vim_left,
            lazy.layout.grow_right(),
            lazy.layout.grow(),
            lazy.layout.increase_ratio(),
            lazy.layout.delete(),
            desc="Resize left",
        ),
        Key(
            ["mod4"],
            vim_right,
            lazy.layout.grow_left(),
            lazy.layout.shrink(),
            lazy.layout.decrease_ratio(),
            lazy.layout.add(),
            desc="Resize right",
        ),
        Key(
            ["mod4", "shift"],
            "asterisk",
            lazy.layout.normalize(),
            desc="normalize window size ratios",
        ),
        Key(["mod4", "shift"], "f", lazy.window.toggle_floating(), desc="toggle floating"),
        Key(["mod4"], "m", lazy.window.toggle_fullscreen(), desc="toggle fullscreen"),
        Key(
            ["mod4", "shift"],
            "Tab",
            lazy.layout.rotate(),
            lazy.layout.flip(),
            desc="Switch which side main pane occupies (XmonadTall)",
        ),
        Key(
            ["mod4"],
            "space",
            lazy.layout.next(),
            desc="Switch window focus to other pane(s) of stack",
        ),
        Key(
            ["mod4", "shift"],
            "space",
            lazy.layout.previous(),
            desc="Switch window focus to other pane(s) of stack",
        ),
    ]
)
#+end_src

** Applications & Scripts

#+begin_src python
keys.extend(
    [
        Key([], "Print", lazy.spawn("spectacle -i"), desc="Screenshot"),
        Key(["mod4"], "v", lazy.spawn("pavucontrol"), desc="PulseAudio-Control"),
        Key(["mod4"], "Return", lazy.spawn(my_term), desc="Terminal"),
        Key(
            ["mod4"],
            "a",
            lazy.spawn("emacsclient -c -a 'emacs' --eval '(org-agenda-list)'"),
            desc="Launch Emacs",
        ),
        Key(["mod4"], "b", lazy.spawn(my_browser), desc="Internet Browser"),
        Key(
            ["mod4"],
            "f",
            lazy.spawn("emacsclient -c -a 'emacs' --eval '(+default/dired nil)'"),
            desc="File-Manager",
        ),
        Key(
            ["control", "shift"],
            "Escape",
            lazy.spawn("plasma-systemmonitor"),
            desc="System Monitor",
        ),
        Key(
            ["mod4", "shift"],
            "b",
            lazy.spawn(f"{my_term} -e '{HOME}/.config/scripts/add-to-bib.fish'"),
            desc="Bibliography Utility",
        ),
        Key(["mod4"], "semicolon", lazy.spawn('emacsclient --eval "(emacs-everywhere)"')),
        # rofi utilities
        Key(["mod4"], "d", lazy.spawn("rofi -show combi -show-icons"), desc="d-Menu"),
        Key(
            ["mod4"],
            "o",
            lazy.spawn(f"fish {HOME}/.config/scripts/rofi/rofi-edit.fish"),
            desc="Open Config Files",
        ),
        Key(
            ["mod4", "shift"],
            "a",
            lazy.spawn(f"bash {HOME}/.config/scripts/rofi/rofi-add-transaction.sh"),
            desc="Ledger Utility",
        ),
        Key(
            ["mod4"],
            "z",
            lazy.spawn(f"fish {HOME}/.config/scripts/rofi/rofi-gtd.fish"),
            desc="GTD Utility",
        ),
        # cycle through autorandr profiles
        Key(
            ["mod4", "shift"],
            "grave",
            lazy.spawn(f"fish {HOME}/.config/scripts/qtile/autorandr_cycle.fish"),
            desc="Cycle through autorandr profiles",
        ),
    ]
)
#+end_src

** Media Keys
Functionality for media keys
#+begin_src python
keys.extend([
    Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause")),
    Key([], "XF86AudioNext", lazy.spawn("playerctl next")),
    Key([], "XF86AudioPrev", lazy.spawn("playerctl previous")),
    Key([], "XF86AudioStop", lazy.spawn("playerctl stop")),
    Key([], "XF86AudioStop", lazy.spawn("playerctl stop")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pamixer -ui 5")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pamixer -ud 5")),
    Key([], "XF86AudioMute", lazy.spawn("pamixer --toggle-mute")),
])
#+end_src

** Brightness Controls
Functionality for brightness controls
#+begin_src python
keys.extend([
    Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl set +10%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl set 10%-")),
])
#+end_src

* Scratchpads
[[http://docs.qtile.org/en/latest/manual/config/groups.html#scratchpad-and-dropdown][Scratchpads]] are special groups that are hidden by default.
The visibility of a scratchpad's content can be toggled on any active group, overlaying its contents when visible.
This behavior is useful for applications that are frequently used for quick tasks, e.g. a terminal emulator.

To make configuration easier, all technical details are hidden behind [[id:60750bf9-47fc-4a20-bfb6-b198ecb6c66f][Technicalities (Putting Everything Together)]].
It does not need to be edited in order to do basic tasks, like adding new scratchpads, changing their keys, or editing individual dimensions / position.

** Creating Scratchpads
:PROPERTIES:
:ID:       9914f159-5401-4c15-b17f-1fe91350d429
:END:
Define the key to toggle the visibility of a particular scratchpad item, along with the command to create its content.
Optionally, the default values can be overridden.
By default:
- The given key, along with Super and Alt (=mod4= and =mod1=, respectively), are used to toggle visibility of the scratchpad.
- The window is centered on the screen.
- Moving the focus away from the window will hide it.
These default behaviors can individually overridden.

First, initialize an empty =list= that shall store the scratchpad information.
#+begin_src python
scratchpads = []
#+end_src

Add a terminal emulator scratchpad.
#+begin_src python
scratchpads.append({"key": "Return", "cmd": my_term, "autostart": True})
#+end_src

A scratchpad that rebuilds ~NixOS~ using the current configuration.
#+begin_src python
scratchpads.append({"key": "r", "cmd": f"{my_term} -e sudo nixos-rebuild switch"})
#+end_src

A scratchpad for controlling audio devices using ~pavucontrol~
#+begin_src python
scratchpads.append({"key": "v", "cmd": "pavucontrol", "autostart": True})
#+end_src

Add GTD related scratchpads.
#+begin_src python
scratchpads.extend(
    [
        {
            "key": key,
            "cmd": f"emacsclient -c {file}",
            "opacity": 1.0,
            "match": Match(wm_class="emacs"),
        }
        for key, file in [
            ("i", "~/gtd/inbox.org"),
            ("g", "~/gtd/gtd.org"),
            ("t", "~/gtd/tickler.org"),
        ]
    ]
)
#+end_src

Add a calculator and mail scratchpad (each in Emacs).
#+begin_src python
scratchpads.extend(
    [
        {
            "key": key,
            "cmd": f'emacsclient -c --eval "{cmd}"',
            "opacity": 0.9,
            "match": Match(wm_class="emacs"),
        }
        for key, cmd in [("c", "(full-calc)"), ("m", "(mu4e)")]
    ]
)
#+end_src

Add an internet browser scratchpad, overriding the default settings such that it is positioned in the bottom-right of the screen.
#+begin_src python :tangle no
scratchpads.append(
    {
        "key": "b",
        "cmd": my_browser,
        "opacity": 0.9,
        "height": 0.6,
        "width": 0.6,
        "centered": False,
        "x": 0.4,
        "y": 0.4,
        "autostart": True
    }
)
#+end_src

Add an scratchpad for configuring [[id:436138a8-5f18-4f66-b8aa-a06c6044a4fa][ActivityWatch]] through the browser.
#+begin_src python
scratchpads.append(
    {
        "key": "a",
        "cmd": f"{my_browser} http://localhost:5600",
        "opacity": 1.0,
        "height": 0.8,
        "width": 0.6,
        "centered": False,
        "x": 0.2,
        "y": 0.2,
        "autostart": True
    }
)
#+end_src

HACK: Autostart scratchpads using simulated keypresses, once ~qtile~ has completed its startup.
From https://www.reddit.com/r/qtile/comments/v4003j/comment/ib1v0pg, with the modification
of using the =startup_once= hook instead of =startup_complete=, since
1. The latter will cause the scratchpads to be opened upon reloading ~qtile~.
2. ~qtile~ locks up while the scratchpads are being created using the =startup_complete= hook; this is not the case for =startup_complete=.
#+begin_src python
def autostart_scratchpads():
    for scratchpad in scratchpads:
        # do not autostart scratchpads by default
        if not scratchpad.get("autostart", False):
            continue

        qtile.cmd_simulate_keypress(["mod1", "mod4"], scratchpad["key"])
#+end_src

** Technicalities (Putting Everything Together)
:PROPERTIES:
:ID:       60750bf9-47fc-4a20-bfb6-b198ecb6c66f
:END:
In this section, use the data defined in [[id:9914f159-5401-4c15-b17f-1fe91350d429][Creating Scratchpads]] to create the scratchpads and bind them to the given keys.

Define a helper function to generate a name, given a key-bind and a command.
#+begin_src python
def get_name(key: str, cmd: str) -> str:
    return f"{cmd}+{key} scratchpad"
#+end_src

Define the =DropDown= items contained in the =ScratchPad= group.
#+begin_src python
def get_dropdown(
    key: str,
    cmd: str,
    modifiers: list[str] = ["mod1", "mod4"],
    opacity: float = 0.8,
    height: float = 0.8,
    width: float = 0.5,
    centered: bool = True,
    x: float = 0,
    y: float = 0,
    on_focus_lost_hide: bool = True,
    ,**kwargs,
) -> DropDown:
    # create a name that will identify this entry
    name = get_name(key, cmd)
    # if centered, calculate the correct x- and y-values
    # such that the window is indeed centered
    if centered:
        x = (1 - width) / 2
        y = (1 - height) / 2
    # create the DropDown entry that will contain the window
    return DropDown(
        name=name,
        cmd=cmd,
        opacity=opacity,
        height=height,
        width=width,
        x=x,
        y=y,
        on_focus_lost_hide=on_focus_lost_hide,
        ,**kwargs,
    )


dropdowns = [get_dropdown(**kwargs) for kwargs in scratchpads]
#+end_src

Add the defined =DropDown= items to a new =ScratchPad= group.
#+begin_src python
groups.append(ScratchPad("scratchpad", dropdowns))
#+end_src

Bind the defined keys.
#+begin_src python
def get_dropdown_toggle_key(
    key: str,
    cmd: str,
    modifiers: list[str] = ["mod4", "mod1"],
    ,**kwargs,
) -> Key:
    name = get_name(key, cmd)
    return Key(modifiers, key, lazy.group["scratchpad"].dropdown_toggle(name))


keys.extend([get_dropdown_toggle_key(**kwargs) for kwargs in scratchpads])
#+end_src

* Colors
Defining some colors for use in our panel.  Colors have two values because you can use gradients.

#+BEGIN_SRC python
colors = {
    "background":          ["#242730", "#242730"], # panel background
    "active_background":   ["#3d3f4b", "#434758"], # background for current screen tab
    "active_foreground":   ["#ffffff", "#ffffff"], # font color for group names
    "active_accent":       ["#ff5555", "#ff5555"], # border line color for current tab
    "accent_1":            ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
    "accent_2":            ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
    "window_foreground":   ["#e1acff", "#e1acff"], # window name
    "inactive_foreground": ["#ecbbfb", "#ecbbfb"]} # backbround for inactive screens
#+END_SRC

* Prompt
Even though I don't use it, the prompt variable has to be set in the configuration.

#+BEGIN_SRC python
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+END_SRC

* Default Widget Settings
Defining a few default widget key values.

#+BEGIN_SRC python
widget_defaults = dict(
    font="UbuntuMono Nerd Font",
    fontsize = 12,
    padding = 2,
    background=colors["active_foreground"]
)
extension_defaults = widget_defaults.copy()
#+END_SRC

* Widgets
This is the bar, or the panel, and the widgets within the bar.

#+BEGIN_SRC python
class alternating_colors():
    count = 0
    color_options = [colors["accent_1"], colors["accent_2"]]

    def get(self):
        self.count += 1
        return self.color_options[self.count % len(self.color_options)]

def init_widgets(show_systray=True):
    widgets = [
        widget.Sep(
            linewidth = 0,
            padding = 6,
            foreground = colors["active_foreground"],
            background = colors["background"]
        ),
        widget.Image(
            filename = "~/.config/qtile/icons/python-white.png",
            scale = "False",
            mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(my_term)}
        ),
        widget.Sep(
            linewidth = 0,
            padding = 6,
            foreground = colors["active_foreground"],
            background = colors["background"]
        ),
        widget.GroupBox(
            font = "Ubuntu, Bold",
            fontsize = 9,
            margin_y = 3,
            margin_x = 0,
            padding_y = 5,
            padding_x = 3,
            borderwidth = 3,
            active = colors["active_foreground"],
            inactive = colors["inactive_foreground"],
            rounded = False,
            highlight_color = colors["active_background"],
            highlight_method = "line",
            this_current_screen_border = colors["window_foreground"],
            this_screen_border = colors["accent_1"],
            other_current_screen_border = colors["window_foreground"],
            other_screen_border = colors["accent_2"],
            foreground = colors["active_foreground"],
            background = colors["background"],
            visible_groups = left_keys,
        ),
        widget.Sep(
            linewidth = 1,
            padding = 5,
            foreground = colors["inactive_foreground"],
            background = colors["background"]
        ),
        widget.GroupBox(
            font = "Ubuntu, Bold",
            fontsize = 9,
            margin_y = 3,
            margin_x = 0,
            padding_y = 5,
            padding_x = 3,
            borderwidth = 3,
            active = colors["active_foreground"],
            inactive = colors["inactive_foreground"],
            rounded = False,
            highlight_color = colors["active_background"],
            highlight_method = "line",
            this_current_screen_border = colors["window_foreground"],
            this_screen_border = colors["accent_1"],
            other_current_screen_border = colors["window_foreground"],
            other_screen_border = colors["accent_2"],
            foreground = colors["active_foreground"],
            background = colors["background"],
            visible_groups = right_keys,
        ),
        widget.Prompt(
            prompt = prompt,
            font = "UbuntuMono Nerd Font",
            padding = 10,
            foreground = colors["active_accent"],
            background = colors["active_background"]
        ),
        widget.Sep(
            linewidth = 0,
            padding = 20,
            foreground = colors["active_foreground"],
            background = colors["background"]
        ),
        widget.WindowName(
            foreground = colors["window_foreground"],
            background = colors["background"],
            padding = 0
        ),
        widget.Systray(
            background = colors["background"],
            padding = 5
        ) if show_systray else None,
        widget.Sep(
            linewidth = 0,
            padding = 6,
            foreground = colors["background"],
            background = colors["background"]
        ) if show_systray else None,
    ]

    # powerline: network
    col_gen = alternating_colors()
    old_bg_color = colors["background"]
    bg_color = col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.Net(
            format = '{down} ↓↑ {up}',
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = 5
        ),
    ])

    # powerline: updates
    # old_bg_color = bg_color
    # bg_color = col_gen.get()
    # widgets.extend([
    #     widget.TextBox(
    #         text='',
    #         font = "UbuntuMono Nerd Font",
    #         background = old_bg_color,
    #         foreground = bg_color,
    #         padding = 0,
    #         fontsize = 37,
    #     ),
    #     widget.TextBox(
    #         text = " ⟳",
    #         padding = 2,
    #         foreground = colors["active_foreground"],
    #         background = bg_color,
    #         fontsize = 14
    #     ),
    #     widget.CheckUpdates(
    #         update_interval = 1800,
    #         distro = "Arch_checkupdates",
    #         display_format = "Updates: {updates} ",
    #         foreground = colors["active_foreground"],
    #         colour_have_updates = colors["active_foreground"],
    #         colour_no_updates = colors["active_foreground"],
    #         mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(my_term + ' -e yay -Syu')},
    #         padding = 5,
    #         background = bg_color
    #     ),
    # ])

    # powerline: cpu
    old_bg_color, bg_color = bg_color, col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.CPU(
            foreground = colors["active_foreground"],
            background = bg_color,
            format = 'CPU: {load_percent:4.1f}%',
            padding = 5
        ),
        widget.TextBox(
            text='|',
            font = "UbuntuMono Nerd Font",
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = -4,
            fontsize = 30,
        ),
        widget.ThermalSensor(
            tag_sensor = "Package id 0",
            foreground = colors["active_foreground"],
            background = bg_color,
            threshold = 90,
            padding = 5
        ),
    ])

    # powerline: GPU
    # old_bg_color = bg_color
    # bg_color = col_gen.get()
    # widgets.extend([
    #     widget.TextBox(
    #         text='',
    #         font = "UbuntuMono Nerd Font",
    #         background = old_bg_color,
    #         foreground = bg_color,
    #         padding = -4,
    #         fontsize = 37,
    #     ),
    #     widget.NvidiaSensors(
    #         foreground = colors["active_foreground"],
    #         background = bg_color,
    #         format = 'GPU: {temp}°C',
    #         padding = 5
    #     ),
    # ])


    # powerline: memory
    old_bg_color, bg_color = bg_color, col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.TextBox(
            text = " ",
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = 5,
            fontsize = 13
        ),
        widget.Memory(
            foreground = colors["active_foreground"],
            background = bg_color,
            format = '{MemUsed: 3.0f}{mm} /{MemTotal: 3.0f}{mm}',
            padding = 7
        ),
    ])

    # powerline: volume
    old_bg_color = bg_color
    bg_color = col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.TextBox(
            text = " Vol:",
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = 0
        ),
        widget.Volume(
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = 5
        ),
    ])

    # powerline: current layout
    old_bg_color = bg_color
    bg_color = col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.CurrentLayoutIcon(
            custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
            foreground = colors["background"],
            background = bg_color,
            padding = 0,
            scale = 0.7
        ),
        widget.CurrentLayout(
            foreground = colors["active_foreground"],
            background = bg_color,
            padding = 5
        ),
    ])

    # powerline: current date / time
    old_bg_color = bg_color
    bg_color = col_gen.get()
    widgets.extend([
        widget.TextBox(
            text='',
            font = "UbuntuMono Nerd Font",
            background = old_bg_color,
            foreground = bg_color,
            padding = -4,
            fontsize = 37,
        ),
        widget.Clock(
            foreground = colors["active_foreground"],
            background = bg_color,
            format = "%A, %B %d - %H:%M "
        ),
    ])


    return list(filter(None, widgets))
#+END_SRC

* Screens
Screen settings for my double monitor setup.

#+BEGIN_SRC python
def init_widgets_screen1():
    widgets_screen1 = init_widgets(show_systray=False)
    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets(show_systray=True)
    return widgets_screen2

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.8, size=20)),
        Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=0.8, size=20))]

if __name__ in {"config", "__main__"}:
    screens = init_screens()
    # widgets = init_widgets()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()
#+END_SRC

* Drag floating windows
Defining some mousebindings for use with floating windows.

#+BEGIN_SRC python
mouse = [
    Drag(["mod4"], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag(["mod4"], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click(["mod4"], "Button2", lazy.window.bring_to_front())
]

dgroups_app_rules = []
follow_mouse_focus = False
bring_front_click = False
cursor_warp = True
#+END_SRC

* Floating windows
Defining what class of windows should always be floating.

#+BEGIN_SRC python
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        # default_float_rules include: utility, notification, toolbar, splash, dialog,
        # file_progress, confirm, download and error.
        ,*layout.Floating.default_float_rules,
        Match(title="Confirmation"),        # tastyworks exit box
        Match(title="Qalculate!"),          # qalculate-gtk
        Match(wm_class="kdenlive"),         # kdenlive
        Match(wm_class="pinentry-gtk-2"),   # GPG key password entry
        Match(title="LibreWolf Private Browsing"),
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = False
#+END_SRC

* Startup applications
The applications that should autostart every time qtile is started.

Call the startup-script that is defined below
#+BEGIN_SRC python
@hook.subscribe.startup_once
def autostart():
    applications = []
    if qtile.core.name == "x11":
        applications.extend(
            [
                [
                    "feh",
                    "--bg-fill",
                    f"{HOME}/Pictures/Wallpaper/ultrawide.jpg",
                    "--bg-fill",
                    f"{HOME}/Pictures/Wallpaper/normal.png",
                ],
                ["element-desktop"],
                ["discord"],
                ["steam-run", f"{HOME}/Downloads/activitywatch/aw-qt"],
                ["emacs", "--daemon"],
            ]
        )

    if applications:
        for application in applications:
            subprocess.Popen(application)

    autostart_scratchpads()
#+END_SRC

#+RESULTS:
